namespace MyBookshelfData.Migrations
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.IO;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<MyBookshelfData.Context>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
            ContextKey = "MyBookshelfData.Context";
        }
        Random rand = new Random();

        protected override void Seed(MyBookshelfData.Context context)
        {
            /*try
            {
                context.Database.ExecuteSqlCommand("DBCC CHECKIDENT('Books', RESEED , 0);");
                context.Database.ExecuteSqlCommand("DBCC CHEKIDENT('Reviews', RESEED , 0);");
                context.Database.ExecuteSqlCommand("DBCC CHEKIDENT('Users', RESEED , 0);");

                context.Books.RemoveRange(context.Books);
                context.Reviews.RemoveRange(context.Reviews);
                context.Users.RemoveRange(context.Users);
                context.UserBooks.RemoveRange(context.UserBooks);
                context.SaveChanges();

                string BooksJson = File.ReadAllText(@"C:\Users\¬Î‡‰‡\Desktop\MyBookshelf-master (1)\MyBookshelf-master\books.json");
                var BooksToAdd = JsonConvert.DeserializeObject<List<Book>>(BooksJson);
                BooksToAdd.ForEach(item => context.Books.Add(item));
                context.SaveChanges();

                string ReviewsJson = File.ReadAllText(@"C:\Users\¬Î‡‰‡\Desktop\MyBookshelf-master (1)\MyBookshelf-master\reviews.json");
                var ReviewsToAdd = JsonConvert.DeserializeObject<List<Review>>(ReviewsJson);
                ReviewsToAdd.ForEach(item => context.Reviews.Add(item));
                context.SaveChanges();

                string UsersJson = File.ReadAllText(@"C:\Users\¬Î‡‰‡\Desktop\MyBookshelf-master (1)\MyBookshelf-master\users.json");
                var UsersToAdd = JsonConvert.DeserializeObject<List<User>>(UsersJson);
                UsersToAdd.ForEach(item => context.Users.Add(item));
                context.SaveChanges();

                string UserBooksJson = File.ReadAllText(@"C:\Users\¬Î‡‰‡\Desktop\MyBookshelf-master (1)\MyBookshelf-master\userbooks.json");
                var UserBooksToAdd = JsonConvert.DeserializeObject<List<ReadBook>>(UserBooksJson);
                UserBooksToAdd.ForEach(item => context.UserBooks.Add(item));
                context.SaveChanges();
            }
            catch(Exception er)
            {
                File.WriteAllText(@"C:\Users\¬Î‡‰‡\Desktop\MyBookshelf-master (1)\MyBookshelf-master\error.txt", JsonConvert.SerializeObject(er));
                throw er;
            }*/

            var user1 = new User { Login = "vvkokovkina", Password = "qweasd", Name = "Vlada", Birth = new DateTime(1998, 08, 01) }; context.Users.Add(user1);
            var user2 = new User { Login = "aipetrov", Password = "zxc", Name = "Andrew", Birth = new DateTime(1999, 03, 03) }; context.Users.Add(user2);
            var user3 = new User { Login = "kokovkina98", Password = "12345", Name = "Kokovkina", Birth = new DateTime(1998, 08, 01) }; context.Users.Add(user3);
            var user4 = new User { Login = "dima1991", Password = "1", Name = "DmitriyGo", Birth = new DateTime(1991, 06, 02) }; context.Users.Add(user4);
            var user5 = new User { Login = "lenochka", Password = "21", Name = "LenaMaltseva", Birth = new DateTime(2002, 10, 03) }; context.Users.Add(user5);
            var user6 = new User { Login = "borya1999", Password = "1999", Name = "Borechka", Birth = new DateTime(1999, 08, 04) }; context.Users.Add(user6);
            var user7 = new User { Login = "vladhello", Password = "hello", Name = "Vlad", Birth = new DateTime(1994, 07, 21) }; context.Users.Add(user7);
            var user8 = new User { Login = "krasotka", Password = "12k", Name = "Princess", Birth = new DateTime(1993, 04, 19) }; context.Users.Add(user8);
            context.SaveChanges();

            var book1 = new Book { Title = "The Picture of Dorian Grey", Author = "Wilde Oscar", Genre = "Philosophical novel", Description = "In the stately London home of his aunt, Lady Brandon, the well-known artist Basil Hallward meets Dorian Gray. Dorian is a cultured, wealthy, and impossibly beautiful young man who immediately captures Basilís artistic imagination. Dorian sits for several portraits, and Basil often depicts him as an ancient Greek hero or a mythological figure. When the novel opens, the artist is completing his first portrait of Dorian as he truly is, but, as he admits to his friend Lord Henry Wotton, the painting disappoints him", ImagePath = "Portret_Doriana_Greya.jpg" }; context.Books.Add(book1);
            var book2 = new Book { Title = "The Tradegy of Romeo and Juliet", Author = "William Shakespeare", Genre = "Tragedy", Description = "In the streets of Verona another brawl breaks out between the servants of the feuding noble families of Capulet and Montague. Benvolio, a Montague, tries to stop the fighting, but is himself embroiled when the rash Capulet, Tybalt, arrives on the scene. After citizens outraged by the constant violence beat back the warring factions, Prince Escalus, the ruler of Verona, attempts to prevent any further conflicts between the families by decreeing death for any individual who disturbs the peace in the future.", ImagePath = "Romeo_And_Julietta.jpg" }; context.Books.Add(book2);
            var book3 = new Book { Title = "Me Before You", Author = "Jojo Moyes", Genre = "Modern prose", Description = "Lou Clarke knows how many steps from the bus stop to her house. She knows that she likes work at the cafe and that, most likely, she does not like her boyfriend Patrick. But Lou does not know that he is about to lose his job and that in the near future, she will need all the strength to overcome the problems that have fallen on her.\r\nWill Traynor knows that the motorcyclist who shot him lost his desire to live. And he knows exactly what needs to be done to put an end to all this.", ImagePath = "MeBeforeYou.jpg" }; context.Books.Add(book3);
            var book4 = new Book { Title = "The Perks of Being a Wallflower", Author = "Steven Chbosky", Genre = "Phylosophical novel", Description = "Fifteen Charlie tries to cope with the suicide of his friend, Michael. To reduce the fear and anxiety caused by the transition to a new school, Charlie begins to write letters to a stranger whom he has never seen, but who must really understand him.\r\nAt school, Charlie finds a mentor and friend in the face of an English teacher. Gradually, he overcomes chronic shyness and draws closer to a classmate.\r\nFirst date, first kiss, clashes with gopnik, experiments with drugs and drinking, loss and acquisition of friends", ImagePath = "The_Perks_Wallflower.jpg" }; context.Books.Add(book4);
            var book5 = new Book { Title = "1Q84", Author = "Haruki Murakami", Genre = "Alternate history", Description = "A young woman named Aomame follows a taxi driverís enigmatic suggestion and begins to notice puzzling discrepancies in the world around her. She has entered, she realizes, a parallel existence, which she calls 1Q84 óìQ is for ëquestion mark.í A world that bears a question.î Meanwhile, an aspiring writer named Tengo takes on a suspect ghostwriting project. He becomes so wrapped up with the work and its unusual author that, soon, his previously placid life begins to come unraveled.", ImagePath = "1Q84.jpg" }; context.Books.Add(book5);
            var book6 = new Book{ Title = "Norwegian Wood", Author = "Haruki Murakami", Genre = "Novel", Description = "Toru, a quiet and preternaturally serious young college student in Tokyo, is devoted to Naoko, a beautiful and introspective young woman, but their mutual passion is marked by the tragic death of their best friend years before. Toru begins to adapt to campus life and the loneliness and isolation he faces there, but Naoko finds the pressures and responsibilities of life unbearable. ", ImagePath = "NorwegianWood.jpg" }; context.Books.Add(book6); 
            var book7 = new Book { Title = "Kafka on the Shore", Author = "Haruki Murakami", Genre = "Novel", Description = "Kafka on the Shore is powered by two remarkable characters: a teenage boy, Kafka Tamura, who runs away from home either to escape a gruesome oedipal prophecy or to search for his long-missing mother and sister; and an aging simpleton called Nakata, who never recovered from a wartime affliction and now is drawn toward Kafka for reasons that, like the most basic activities of daily life, he cannot fathom.", ImagePath = "KafkaontheShore.jpg" }; context.Books.Add(book7);
            var book8 = new Book { Title = "Heaven and Hell", Author = "Neel Burton", Genre = "Psychology", Description = "Today more than ever, the education doled out in classrooms is cold and cognitive. But, once outside, it is our uneducated emotions that move us, hold us back, and lead us astray. It is, at first and at last, our emotions that determine our choice of profession, partner, and politics, and our relation to money, sex, and religion. Nothing can make us feel more alive, or more human, than our emotions, or hurt us more. ", ImagePath = "HeavenAndHell.jpg" }; context.Books.Add(book8);
            var book9 = new Book { Title = "The Psychopath Test", Author = "Jon Ronson", Genre = "Psychology", Description = "When Jon Ronson is drawn into an elaborate hoax played on some of the world's top scientists, his investigation leads him, unexpectedly, to psychopaths. He meets an influential psychologist who is convinced that many important business leaders and politicians are in fact high-flying, high-functioning psychopaths, and teaches Ronson how to spot them. Armed with these new abilities, Ronson meets a patient inside an asylum for the criminally insane who insists that he's sane, a mere run-of-the-mill troubled youth, not a psychopathó a claim that might be only manipulation.", ImagePath = "thepsycopathtest.jpg" }; context.Books.Add(book9);
            var book10 = new Book { Title = "Hamlet", Author = "William Shakespeare", Genre = "Tragedy", Description = "Among Shakespeare's plays, \"Hamlet\" is considered by many his masterpiece. Among actors, the role of Hamlet, Prince of Denmark, is considered the jewel in the crown of a triumphant theatrical career. Now Kenneth Branagh plays the leading role and co-directs a brillant ensemble performance. Three generations of legendary leading actors, many of whom first assembled for the Oscar-winning film \"Henry\" V, gather here to perform the rarely heard complete version of the play. ", ImagePath = "Hamlet.jpg" }; context.Books.Add(book10);
            var book11 = new Book { Title = "Othello", Author = "William Shakespeare", Genre = "Tragedy", Description = "In Othello, Shakespeare creates a powerful drama of a marriage that begins with fascination (between the exotic Moor Othello and the Venetian lady Desdemona), with elopement, and with intense mutual devotion and that ends precipitately with jealous rage and violent deaths. He sets this story in the romantic world of the Mediterranean, moving the action from Venice to the island of Cyprus and giving it an even more exotic coloring with stories of Othello's African past. Shakespeare builds so many differences into his hero and heroineódifferences of race, of age,", ImagePath = "Otello.jpg" }; context.Books.Add(book11);
            var book12 = new Book { Title = "David Copperfield", Author = "Charles Dickens", Genre = "Novel", Description = "David Copperfield is the story of a young manís adventures on his journey from an unhappy & impoverished childhood to the discovery of his vocation as a successful novelist. Among the gloriously vivid cast of characters he encounters are his tyrannical stepfather, Mr Murdstone; his formidable aunt, Betsey Trotwood; the eternally humble yet treacherous Uriah Heep; frivolous, enchanting Dora; &the magnificently impecunious Micawber, one of literatureís great comic creations.", ImagePath = "DavidCopperfield.jpg" }; context.Books.Add(book12); 
            var book13 = new Book { Title = "A Christmas Tree", Author = "Charles Dickens", Genre = "Memoir", Description = "A Christmas Tree is perhaps best described as Dickens's \"other\" Christmas story, this is an elderly narrator's reminiscence of holidays past, each incident inspired by the gifts and toys that decorate the traditional tree. There is a range of appeal in the story itself, from snug memories of beloved toys to the passing along of eerie stories surrounding various childhood haunts.", ImagePath = "christmascarol.jpg" }; context.Books.Add(book13);
            var book14 = new Book { Title = "The Sea Wolf", Author = "Jack London", Genre = "Novel", Description = "The novel begins when Van Weyden is swept overboard into San Francisco Bay, and plucked from the sea by Larsen's seal-hunting vessel, the Ghost. This ship's evil captain, Wolf Larsen - The Sea-Wolf - is a murderous tyrant who uses his superhuman strength to torture and destroy, his brilliant mind to invent sick games, and his relentless will to control his mutinous crew. Pressed into service as a cabin boy by the ruthless captain, Van Weyden becomes an unwilling participant in a brutal shipboard drama. ", ImagePath = "SeaWolf.jpeg" }; context.Books.Add(book14);
            var book15 = new Book { Title = "1984", Author = "George Orwell", Genre = "Novel", Description = "Winston Smith is a man who lives in Airstrip One, the remnants of Britain broken down by war, civil conflict, and revolution in the year 1984. A member of the middle class Outer Party, Winston lives in a one-room London flat in the Victory Mansions. Smith lives on rations consisting of black bread, synthetic meals, and \"Victory\"-branded gin. Telescreens in every building, accompanied by microphones and cameras, allow the Thought Police to identify anyone who might compromise the Party's regime, and threat of surveillance forces citizens to display an obligatory optimism regarding the country", ImagePath = "1984.jpg" }; context.Books.Add(book15);
            var book16 = new Book { Title = "Gone with the Wind", Author = "Margaret Mitchell", Genre = "Novel", Description = "Gone with the Wind takes place in the southern United States in the state of Georgia during the American Civil War (1861ñ1865) and the Reconstruction Era (1865ñ1877). The novel unfolds against the backdrop of rebellion wherein seven southern states initially, including Georgia, have declared their secession from the United States (the \"Union\") and formed the Confederate States of America (the \"Confederacy\"), after Abraham Lincoln was elected president. The Union refuses to accept secession and no compromise is found as war approaches.", ImagePath = "GoneWithTheWind.jpg" }; context.Books.Add(book16);
            var book17 = new Book { Title = "The Hunger Games", Author = "Suzanne Collins", Genre = "Novel", Description = "The Hunger Games takes place in a nation known as Panem, established in North America after the destruction of the continent's civilization by an unknown apocalyptic event. The nation consists of the wealthy Capitol and twelve surrounding, poorer districts under the Capitol's dictatorial control. The Capitol exploits the districts for their natural resources and cheap labour.", ImagePath = "thehungergames.jpg" }; context.Books.Add(book17);
            var book18 = new Book { Title = "Pride and Prejudice", Author = "Jane Austen", Genre = "Romance novel", Description = "The novel opens with Mrs. Bennet trying to persuade Mr. Bennet to visit Mr. Bingley, an eligible bachelor who has arrived in the neighborhood. After some verbal sparring with Mr. Bennet baiting his wife, it transpires that this visit has already taken place at Netherfield, Mr.Bingley's rented house. The visit is followed by an invitation to a ball at the local assembly rooms that the whole neighbourhood will attend.", ImagePath = "PrideandPrejudice.jpg" }; context.Books.Add(book18); 
            var book19 = new Book { Title = "Animal Farm", Author = "George Orwell", Genre = "Allegorical novella ", Description = "As ferociously fresh as it was more than a half century ago, this remarkable allegory of a downtrodden society of overworked, mistreated animals, and their quest to create a paradise of progress, justice, and equality is one of the most scathing satires ever published. As we witness the rise and bloody fall of the revolutionary animals, we begin to recognize the seeds of totalitarianism in the most idealistic organization; and in our most charismatic leaders, the souls of our cruelest oppressors.", ImagePath = "AnimalFarm.jpg" }; context.Books.Add(book19);
            var book20 = new Book { Title = "Down and Out in Paris and London", Author = "George Orwell", Genre = "Memoir", Description = "This unusual fictional account - in good part autobiographical - narrates without self-pity and often with humor the adventures of a penniless British writer among the down-and-out of two great cities. The Parisian episode is fascinating for its expose of the kitchens of posh French restaurants, where the narrator works at the bottom of the culinary echelon as dishwasher, or plongeur. In London, while waiting for a job, he experiences the world of tramps, street people, and free lodging houses.", ImagePath = "DownandOutinParisandLondon.jpg" }; context.Books.Add(book20);
            var book21 = new Book { Title = "The Last Song", Author = "Nicholas Sparks ", Genre = "Novel", Description = "Seventeen year-old Veronica ìRonnieî Millerís life was turned upside-down when her parents divorced and her father moved from New York City to Wilmington, North Carolina. Three years later, she remains angry and alienated from her parents, especially her fatherÖ until her mother decides it would be in everyoneís best interest if she spent the summer in Wilmington with him.", ImagePath = "TheLastSong.jpeg" }; context.Books.Add(book21);
            var book22 = new Book { Title = "The Lucky One", Author = "Nicholas Sparks", Genre = "Romance novel", Description = "When U.S. Marine Logan Thibault finds a photograph of a smiling young woman half-buried in the dirt during his third tour of duty in Iraq, his first instinct is to toss it aside. Instead, he brings it back to the base for someone to claim, but when no one does, he finds himself always carrying the photo in his pocket. Soon Thibault experiences a sudden streak of luckówinning poker games and even surviving deadly combat that kills two of his closest buddies. Only his best friend, Victor, seems to have an explanation for his good fortune: the photographóhis lucky charm.", ImagePath = "theluckyone.jpg" }; context.Books.Add(book22);
            var book23 = new Book { Title = "See Me", Author = "Nicholas Sparks", Genre = "Novel", Description = "Colin Hancock is giving his second chance his best shot. With a history of violence and bad decisions behind him and the threat of prison dogging his every step, he's determined to walk a straight line. To Colin, that means applying himself single-mindedly toward his teaching degree and avoiding everything that proved destructive in his earlier life. Reminding himself daily of his hard-earned lessons, the last thing he is looking for is a serious relationship.", ImagePath = "seeme.jpg" }; context.Books.Add(book23);
            var book24 = new Book { Title = "To Kill a Mockingbird", Author = "Harper Lee", Genre = "Novel", Description = "The unforgettable novel of a childhood in a sleepy Southern town and the crisis of conscience that rocked it, To Kill A Mockingbird became both an instant bestseller and a critical success when it was first published in 1960. It went on to win the Pulitzer Prize in 1961 and was later made into an Academy Award - winning film, also a classic.", ImagePath = "ToKillAMockingbird.jpg" }; context.Books.Add(book24); 
            var book25 = new Book { Title = "Beautiful Disaster", Author = "McGuire", Genre = "Modern novel", Description = "The new Abby Abernathy is a good girl. She doesnít drink or swear, and she has the appropriate number of cardigans in her wardrobe. Abby believes she has enough distance from the darkness of her past, but when she arrives at college with her best friend, her path to a new beginning is quickly challenged by Eastern University's Walking One-Night Stand.", ImagePath = "BeautifulDisaster.jpg" }; context.Books.Add(book25);
            var book26 = new Book { Title = "Hopeless", Author = "Colleen Hoover", Genre = "Modern novel", Description = "Thatís what seventeen-year-old Sky realizes after she meets Dean Holder. A guy with a reputation that rivals her own and an uncanny ability to invoke feelings in her sheís never had before. He terrifies her and captivates her all in the span of just one encounter, and something about the way he makes her feel sparks buried memories from a past that she wishes could just stay buried.", ImagePath = "hopeless.jpg" }; context.Books.Add(book26);
            var book27 = new Book { Title = "Six Thinking Hats", Author = "Edward de Bono", Genre = "Psychology", Description = "The multi million-copy bestseller Six Thinking Hats by Edward de Bono, author of Lateral Thinking and I Am Right You Are Wrong, teaches you how to run better meetings and make better decisions. Meetings are a crucial part of all our lives, but too often they go nowhere and waste valuable time. In Six Thinking Hats, Edward de Bono shows how meetings can be transformed to produce quick, decisive results every time. The Six Hats method is a devastatingly simple technique based on the brain's different modes of thinking.", ImagePath = "sixThinkingHats.jpg" }; context.Books.Add(book27);
            var book28 = new Book { Title = "Before the Devil Breaks You", Author = "Libba Bray", Genre = "Alternative history", Description = "After battling a supernatural sleeping sickness that early claimed two of their own, the Diviners have had enough of lies. They're more determined than ever to uncover the mystery behind their extraordinary powers, even as they face off against an all-new terror. Out on Ward's Island, far from the city's bustle, sits a mental hospital haunted by the lost souls of people long forgotten--ghosts who have unusual and dangerous ties to the man in the stovepipe hat, also known as the King of Crows.", ImagePath = "BeforeTheDevilBreaksYou.jpg" }; context.Books.Add(book28);
            var book29 = new Book { Title = "Romancing the Werewolf", Author = "Gail Carriger", Genre = "Alternative history", Description = "Biffy, newly minted Alpha of the London Pack, is not having a good Christmas. His Beta abandoned him, his werewolves object to his curtain choices, and someone keeps leaving babies on his doorstep.", ImagePath = "RomancingTheInventor.jpg" }; context.Books.Add(book29);
            var book30 = new Book { Title = "Mean", Author = "Myriam Gurba", Genre = "Memoir", Description = "Myriam Gurba's debut is the bold and hilarious tale of her coming of age as a queer, mixed-race Chicana. Blending radical formal fluidity and caustic humor, Mean turns what might be tragic into piercing, revealing comedy. This is a confident, funny, brassy book that takes the cost of sexual assault, racism, misogyny, and homophobia deadly seriously.", ImagePath = "Mean.jpg" }; context.Books.Add(book30);
            var book31 = new Book { Title = "The Actor's Life", Author = "Jenna Fischer", Genre = "Memoir", Description = "Jenna Fischerís Hollywood journey began at the age of 22 when she moved to Los Angeles from her hometown of St. Louis. With a theater degree in hand, she was certain everything would fall easily into place. Never mind that she didnít know a single person in the entertainment industry. She was determined, she was confident, she was ready to work hard.So, what could go wrong ? ", ImagePath = "theactorslife.jpg" }; context.Books.Add(book31);
            context.SaveChanges();

            var review1 = new Review { Rating = 4, DateTime = new DateTime(2016, 11, 12), Comment = "Good book", Book = book1, User = user3 }; context.Reviews.Add(review1);
            var review2 = new Review { Rating = 5, DateTime = new DateTime(2017, 03, 03), Comment = "I was really crying, my heart is broken!", Book = book2, User = user3 }; context.Reviews.Add(review2);
            var review3 = new Review { Rating = 5, DateTime = new DateTime(2015, 10, 13), Comment = "To be honest, I did not think that I would appreciate this work so highly. A book about the ability to be a good, good friend. About how difficult it is to be a no - one needed person. Probably, most of all it will be loved and understood by the quiet ones, similar to Charlie himself.", Book = book4, User = user4 }; context.Reviews.Add(review3);
            var review4 = new Review { Rating = 3, DateTime = new DateTime(2014, 01, 09), Comment = "This book is too hard to read, it was written for crazy teenagers, who doesn't want to live this life", Book = book4, User = user6 }; context.Reviews.Add(review4);
            var review5 = new Review { Rating = 2, DateTime = new DateTime(2014, 08, 10), Comment = "How this book became one of Murakami's most famous and popular baffles me. In fact, when asked about it in an interview, Murakami himself said that he was puzzled by its popularity and that it really isn't what he wants to be known for.", Book = book7, User = user7 }; context.Reviews.Add(review5);
            var review6 = new Review { Rating = 5, DateTime = new DateTime(2015, 06, 22), Comment = "Great ending. This sure was the saddest book I've ever read. Seems very dark and depressing, but the light comes out at the very end and you can see the sunshine through the clouds. I've never read a book like this and to be honest, I'm not sure I ever want to read another one.", Book = book7, User = user6 }; context.Reviews.Add(review6);
            var review7 = new Review { Rating = 4, DateTime = new DateTime(2017, 08, 17), Comment = "Murakami divides his novel into two. There is the past and death. Then there is future and life. What road do you take?", Book = book7, User = user3 }; context.Reviews.Add(review7);
            var review8 = new Review { Rating = 4, DateTime = new DateTime(2016, 07, 04), Comment = "I donít know what to say about Hamlet. I could go on about how it is a story of madness and revenge. I could talk about the bonds of family loyalty, the sacrifices of love, the breaches of trust and their deleterious effects on the psyche. But this is old newsóHamlet has been around for over four hundred years.", Book = book12, User = user7 }; context.Reviews.Add(review8);
            var review9 = new Review { Rating = 4, DateTime = new DateTime(2015, 03, 03), Comment = "This is my third time reading Hamlet and, like a fine wine... you know the rest. I read the same copy I've had lying around for years with one page of notes on the left and the play on the right.", Book = book12, User = user5 }; context.Reviews.Add(review9);
            var review10 = new Review { Rating = 5, DateTime = new DateTime(2007, 05, 12), Comment = "I have always admired this play as Shakespeare's most theatrical tragedy, but I also feel that it often veers too close to melodrama. Shaw remarked that Othello is written in the style of Italian opera, and it shares with Verdi and Donizetti the same big emotions, the same clear demarcation of good and evil", Book = book15, User = user6 }; context.Reviews.Add(review10);
            var review11 = new Review { Rating = 2, DateTime = new DateTime(2017, 07, 14), Comment = "Call it an act of heresy but Iím abandoning this. Iíve got to page 600 which means Iíve only another 150 pages to go but Iíve completely lost interest. The characters are too one dimensional and you can see the plot coming as if itís daubed in road marking paint. ", Book = book17, User = user4 }; context.Reviews.Add(review11);
            var review12 = new Review { Rating = 5, DateTime = new DateTime(2017, 11, 14), Comment = "As always after reading such a density, it is a bit of a friend left on the road. Dickens himself will admit to having had difficulty in quitting David Copperfield after such a long intimacy!", Book = book17, User = user6 }; context.Reviews.Add(review12);
            var review13 = new Review { Rating = 2, DateTime = new DateTime(2010, 08, 21), Comment = "Dickens seems to have gotten distracted half-way through this tale....... It began as an account of various Christmases from his past and then turned into a catalogue of ghost stories. Weird.", Book = book18, User = user5 }; context.Reviews.Add(review13);
            var review14 = new Review { Rating = 1, DateTime = new DateTime(2012, 10, 17), Comment = "After I finished reading 'A Christmas Carol', I thought of reading another one of Dickens' Christmas story and I started this one, not knowing that it was only a short story, a very short one (around 20 pages), and perhaps not even a story, more like an essay.", Book = book18, User = user4 }; context.Reviews.Add(review14);
            var review15 = new Review { Rating = 4, DateTime = new DateTime(2014, 01, 02), Comment = "I've read quite a few of London's books although it was years ago for most. I've reread a few, but somehow never got to this one. I'm glad I remedied that. Wolf Larsen & Hump are certainly two of the most vivid & interesting characters I've had the pleasure to encounter.", Book = book20, User = user3 }; context.Reviews.Add(review15);
            var review16 = new Review { Rating = 1, DateTime = new DateTime(2012, 08, 16), Comment = "This book is a nightmare. It's as if Jamie McGuire reached into my brain, found my worst nightmare, wrote it down, and then charged me $13.99 to relive it.", Book = book25, User = user3 }; context.Reviews.Add(review16);
            var review17 = new Review { Rating = 1, DateTime = new DateTime(2015, 02, 15), Comment = "I haven't been this pissed off reading a book since Bad Romeo. Beautiful Disaster was a cluster eff of a read managing to throw everything I hate in a book into one novel.", Book = book25, User = user6 }; context.Reviews.Add(review17);
            var review18 = new Review { Rating = 5, DateTime = new DateTime(2014, 06, 20), Comment = "OMG!!! Seriously, this book was amazing. I never thought I would love it the way I did, I mean, I knew I would like it, but not that I would be this crazy about it.", Book = book28, User = user3 }; context.Reviews.Add(review18);
            var review19 = new Review { Rating = 5, DateTime = new DateTime(2017, 03, 19), Comment = "I wasn't able to fully appreciate this book the first time I've read it. I thought I should give this novel a chance, thus I read this again to see if I will like this more on the second time. I didn't like it, but rather I love it! I could see myself on Ronnie's shoes at family matters only.", Book = book28, User = user6 }; context.Reviews.Add(review19);
            var review20 = new Review { Rating = 3, DateTime = new DateTime(2012, 12, 05), Comment = "I've read a few Sparks books and for the most part, Iíve really enjoyed them from beginning to end. However, The Last Song took me quite a while to get into, and I was very close to throwing in the towel and giving up", Book = book28, User = user7 }; context.Reviews.Add(review20);
            var review21 = new Review { Rating = 4, DateTime = new DateTime(2017, 09, 09), Comment = "Cute, fluffy, and the long-awaited happily ever after. Complete with babies, the best of men's fashion, and arguments about purple drapes.", Book = book29, User = user7 }; context.Reviews.Add(review21);
            var review22 = new Review { Rating = 5, DateTime = new DateTime(2017, 11, 06), Comment = "I was very much excited about this one, I loved Biffy and Lyall together in the Parasol Protectorate books. Even though they weren't together for long, I was shipping them instantly. They just made the perfect couple. <3", Book = book29, User = user4 }; context.Reviews.Add(review22);
            var review23 = new Review { Rating = 5, DateTime = new DateTime(2017, 09, 14), Comment = "This book blew. me. away. One minute I was cringing away from the graphic descriptions of sexual assault and the next I was chuckling at the brilliant word play Gurba throws down. This is one of those books that make me feel like I'm not quite cool or smart enough ", Book = book30, User = user3 }; context.Reviews.Add(review23);
            var review24 = new Review { Rating = 5, DateTime = new DateTime(2017, 11, 29), Comment = "Thought provoking, provocative, semi-autobiography. I really appreciated how she addressed sexual assault in this book. For women, one of the main challenges of talking about sexual assault/harassment, is trying to get men to understand how constant it is in our lives", Book = book30, User = user5 }; context.Reviews.Add(review24);
            var review25 = new Review { Rating = 4, DateTime = new DateTime(2017, 07, 13), Comment = "This book is basically an actors textbook. Please, please, please know this. It was perfect for me cause, hey, I'm an actor. Jenna has been giving out amazing information like this for years, via blog posts and podcasts, and I have been waiting for her to publish it. ", Book = book31, User = user3 }; context.Reviews.Add(review25);
            var review26 = new Review { Rating = 4, DateTime = new DateTime(2017, 05, 26), Comment = "Super cute! Definitely don't have to want to be an actor to enjoy. Full review to come upon publication.", Book = book31, User = user7 }; context.Reviews.Add(review26);
            var review27 = new Review { Rating = 4, DateTime = new DateTime(2016, 09, 19), Comment = "I didn't even understand what this book was about, i was sleeping all the time I had started to open it!", Book = book9, User = user6 }; context.Reviews.Add(review27);
            var review28 = new Review { Rating = 5, DateTime = new DateTime(2016, 12, 14), Comment = "A lot of useful information for our life", Book = book10, User = user5 }; context.Reviews.Add(review28);
            var review29 = new Review { Rating = 4, DateTime = new DateTime(2015, 03, 13), Comment = "Interesting plot", Book = book21, User = user7 }; context.Reviews.Add(review29);
            var review30 = new Review { Rating = 5, DateTime = new DateTime(2017, 07, 18), Comment = "This book was worth reading, because it is the truth of how we should live..", Book = book21, User = user3 }; context.Reviews.Add(review30);
            var review31 = new Review { Rating = 5, DateTime = new DateTime(2012, 06, 05), Comment = "My favourite book and plot!", Book = book23, User = user4 }; context.Reviews.Add(review31);
            var review32 = new Review { Rating = 4, DateTime = new DateTime(2015, 09, 07), Comment = "Nothing is more interesting for me than reading this piece of art)", Book = book23, User = user6 }; context.Reviews.Add(review32);
            context.SaveChanges();
        }
    }
}
